if (process.env.NODE_ENV !== "production") {
    require('dotenv').config();
}
const secret = process.env.SECRET;
const User = require('../models/user');
const Post = require('../models/post');
const bcrypt =require('bcryptjs');
const jwt = require('jsonwebtoken');

module.exports.signin = async(req, res, next) => {
    // console.log("....")
    const { password , username} = req.body;

    try {
      const oldUser = await User.findOne({ username });
  
      if (!oldUser) return res.status(404).json({ message: "User doesn't exist" });
  
      const isPasswordCorrect = await bcrypt.compare(password, oldUser.password);
  
      if (!isPasswordCorrect) return res.status(400).json({ message: "Invalid credentials" });
  
      const token = jwt.sign({ email: oldUser.email, id: oldUser._id }, secret);
      // res.cookie("jwtoken",token,{
      //   expires:new Date(Date.now() + 86400000 ),
      //   httpOnly:true
      // });
      res.status(200).json({ result: oldUser, token });
    } catch (err) {
      res.status(500).json({ message: "Something went wrong" });
    }
};

module.exports.register = async(req, res, next) => {
    // console.log(req.body);
    const { email, password, name, username } = req.body;

  try {
    const oldUser = await User.findOne({username });

    if (oldUser) return res.status(400).json({ message: "User already exists" });

    const hashedPassword = await bcrypt.hash(password, 12);
   
    const result = await User.create({ email, password: hashedPassword, name , username});

    const token = jwt.sign( { email: result.email, id: result._id }, secret);
    // res.cookie("jwtoken",token,{
    //   expires:new Date(Date.now() + 86400000 ),
    //   httpOnly:true
    // });
    res.status(201).json({ result, token });
  } catch (error) {
    res.status(500).json({ message: "Something went wrong" });
    
    console.log(error);
  }
};
module.exports.gregister = async(req, res, next) => {
 try{
  const guser = await req.body.user;
  console.log(guser);
  
  const email =  guser.email;
  const name = guser.displayName;
  const token =guser.stsTokenManager.accessToken
  const username = email.substring(0, email.indexOf("@"));
  
  // res.send("sed");
  const oldUser = await User.findOne({ email });
  let id;
  if (!oldUser) {      
    
  const found = await User.create({ email, name,username});
  id=found._id;
  }  
  else{
    id=oldUser._id;
  }
  result= await User.findById(id);
      res.status(201).json({ result, token });
}catch (error) {
  res.status(500).json({ message: "Something went wrong" });
  
  console.log(error);
}

};
// module.exports.logout = async(req, res, next) => {
//   res.clearCookie('jwtoken',{path:'/'});
//   res.status(200).send('logged out')
// };
module.exports.getUser = async(req, res, next) => {
  try{
  const { id } = req.params;
  
  const user = await User.findById(id);

  if (user) {
    res.json({
      _id: user._id,
      username: user.username,
      name: user.name,
      email: user.email,
      isAdmin: user.isAdmin,
      followers:user.followers,
      following:user.following      
    })
  } else {
    res.status(404).json('User not found');
  }
}
  catch (error) {
    res.status(500).json({ message: "Something went wrong" });
    
    console.log(error);
  }
};
module.exports.getUserPosts = async(req, res, next) => {
  const { id } = req.params;
  const posts = await Post.find({authorid : id});
  if(posts){
    res.status(200).json(posts);
  }
  else{
    res.status(404).json('No posts found');
  }
};