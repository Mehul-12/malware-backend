  if (process.env.NODE_ENV !== "production") {
    require('dotenv').config();
  }

  const User = require('../models/user');
  const Comment = require('../models/comment');
  const Post = require('../models/post');

  // module.exports.showComments = async (req, res) => {
  //   try {  
  //     const { id } = req.params;
  //     const post = await Post.findById(id);
  //     const comments = post.comments;

  //     const tp=await Comment.find({});
  //     const arr=[];
  //     for(let i=0;i<tp.length;i++){
  //       if(id==tp[i].postid) {
  //         arr.push(tp[i]);
  //       }
  //     }
  //     res.status(200).json(arr);
  //   }
  //   catch (error) {
  //     res.status(500).json({ message: "Cannot show comments" });    
  //     console.log(error);
  //   }
  // }

  module.exports.createComment = async (req, res) => {
    const user = await User.findById(req.user._id)
    // console.log(user._id);

    const authorid=user._id;
    const authorname=user.name;
    
    const {description} = req.body;  
  try {  
    const { id } = req.params;
    const post = await Post.findById(id);
    const result = await Comment.create({id,description,authorid,authorname});
    //console.log(result);
    post.comments.push(result);
    const updatedPost = await Post.findByIdAndUpdate(id, {...post}, { new: true });
    //console.log(updatedPost);
     await updatedPost.populate({
      path:'comments'
    });
    res.status(200).json(updatedPost.comments);
    
  } catch (error) {
      res.status(500).json({ message: "Comment Not added" });    
      console.log(error);
    }
  };
  module.exports.deleteComment = async (req, res) => {
    try{
    const { id, commentid } = req.params;
    
    await Comment.findByIdAndDelete(commentid);
    const updatedPost = await Post.findByIdAndUpdate(id, { $pull: { comments: commentid } }).populate({
      path:'comments'
    });
    //const post= await Post.findById(id);
    res.status(200).json(updatedPost)
    }
    catch (error) {
      res.status(500).json({ message: "Comment can not be deleted" });    
      console.log(error);
    }
    
};
module.exports.updateComment = async (req, res) => {
  try{
    const { id, commentid } = req.params;
    const updatedcomment=await Comment.findByIdAndUpdate(commentid,{...req.body},{new:true});
    // const updatedPost = await Post.findByIdAndUpdate(id, { $pull: { comments: commentid } }).populate({
    //   path:'comments'
    // });
    const post = await Post.findById(id).populate({
      path:'comments'
    });
    res.status(200).json(post);
  }
  catch (error) {
    res.status(500).json({ message: "Comment Not be Updated" });    
    console.log(error);
  }
};