if (process.env.NODE_ENV !== "production") {
  require('dotenv').config();
}
const secret = process.env.SECRET;
const express = require('express');
const mongoose = require('mongoose');
const Post = require('../models/post');

module.exports.getPosts = async (req, res) => { 
  try {
      const postMessages = await PostMessage.find();
              
      res.status(200).json(postMessages);
  } catch (error) {
      res.status(404).json({ message: error.message });
  }
}
module.exports.getPost = async (req, res) => { 
  const { id } = req.params;
  try {
      const post = await PostMessage.findById(id);
      
      res.status(200).json(post);
  } catch (error) {
      res.status(404).json({ message: error.message });
  }
}
//post.author=req.user._id

module.exports.createPost = async (req, res) => {
  // res.send("hi");  
  console.log(req.body);
  const { title, description, posttype } = req.body;

try {  
  const result = await Post.create({ title, description, posttype });
  res.status(201).json({ result });
  res.send()
  
} catch (error) {
    res.status(500).json({ message: "Post Not created" });    
    console.log(error);
  }
};

module.exports.updatePost = async (req, res) => {
  const { id } = req.params;
  const { title, description, posttype } = req.body;
  const newpost=await Post.findByIdAndUpdate(id,{...req.body},{new:true});
  res.status(200).json(newpost);
}

module.exports.deletePost = async (req, res) => {
  const { id } = req.params;  
  await Post.findByIdAndDelete(id);
  res.status(200).json({ message:"post deleted" });
}

module.exports.likePost = async (req, res) => {
  const { id } = req.params;
  
  //will it be userId or objectId just see to it.
  if(!req.userId) return res.json({message:"not authorised"})

  if (!mongoose.Types.ObjectId.isValid(id)) return res.status(404).send(`No post with id: ${id}`);
  
  const post = await PostMessage.findById(id);

  const index=post.likes.findIndex((id)=>id == String(req.UserId))
  if(index==-1) {
    //like the post
    post.likes.push(req.userId)
  }
  else{
    //dislike the post.
    post.likes=post.likes.filter((id)=> id != String(req.userId))
  }
  //const updatedPost = await PostMessage.findByIdAndUpdate(id, { likeCount: post.likeCount + 1 }, { new: true });
  const updatedPost = await PostMessage.findByIdAndUpdate(id, post, { new: true });
  res.json(updatedPost);
}