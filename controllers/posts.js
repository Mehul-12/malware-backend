if (process.env.NODE_ENV !== "production") {
  require('dotenv').config();
}
const secret = process.env.SECRET;
const express = require('express');
const mongoose = require('mongoose');
const User = require('../models/user');
const Post = require('../models/post');

module.exports.getPosts = async (req, res) => { 
  try {
      const posts = await Post.find({});              
      res.status(200).json(posts);
  } catch (error) {
      res.status(404).json({ message: error.message });
  }
}

module.exports.getPost = async (req, res) => { 
  const { id } = req.params;
  try {
      const post = await PostMessage.findById(id);
      
      res.status(200).json(post);
  } catch (error) {
      res.status(404).json({ message: error.message });
  }
}
//post.author=req.user._id

module.exports.createPost = async (req, res) => {
  console.log(req.user);
  const user = await User.findById(req.user._id)
  console.log(user._id);

  const authorid=user._id
  const authorname=user.name;
  
  const {title, description, tags, postadmins} = req.body;
try {  
  const result = await Post.create({ authorid,authorname,title, description, tags, postadmins });
  res.status(201).json({ result });
  res.send()
  
} catch (error) {
    res.status(500).json({ message: "Post Not created" });    
    console.log(error);
  }
};

module.exports.updatePost = async (req, res) => {
  const { id } = req.params;
  const { title, description, tags, postadmins} = req.body;
  const newpost=await Post.findByIdAndUpdate(id,{...req.body},{new:true});
  res.status(200).json(newpost);
}

module.exports.deletePost = async (req, res) => {
  const { id } = req.params;  
  await Post.findByIdAndDelete(id);
  res.status(200).json({ message:"post deleted" });
}

module.exports.upVote = async (req, res) => {
  const { id } = req.params;
  // console.log(req.user._id);
  const userid=req.user._id;

  if(!userid) return res.json({message:"not authorised"})  
  const post = await Post.findById(id);
  //console.log(post);
  try{
    const index=post.upvotes.findIndex((id)=>id == String(userid));    
    console.log(index);
    
    if(index==-1) {
      post.upvotes.push(userid);
      post.downvotes=post.downvotes.filter((id)=> id != String(userid))
    }
    else{
      post.upvotes=post.upvotes.filter((id)=> id != String(userid))
    }
    const updatedPost = await Post.findByIdAndUpdate(id, post, { new: true });
    res.status(200).json(updatedPost);
  }
  catch (error) {
    res.status(500).json({ message: "Post couldnt be liked" });    
    console.log(error);
  }
}

module.exports.downVote = async (req, res) => {
  const { id } = req.params;
  // console.log(req.user._id);
  const userid=req.user._id;

  if(!userid) return res.json({message:"not authorised"})  
  const post = await Post.findById(id);
  //console.log(post);
  try{
    const index=post.downvotes.findIndex((id)=>id == String(userid));    
    console.log(index);
    
    if(index==-1) {
      post.downvotes.push(userid);
      post.upvotes=post.upvotes.filter((id)=> id != String(userid))
    }
    else{
      post.downvotes=post.downvotes.filter((id)=> id != String(userid))
    }
    const updatedPost = await Post.findByIdAndUpdate(id, post, { new: true });
    res.status(200).json(updatedPost);
  }
  catch (error) {
    res.status(500).json({ message: "Post couldnt be disliked" });    
    console.log(error);
  }
}