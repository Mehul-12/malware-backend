if (process.env.NODE_ENV !== "production") {
  require('dotenv').config();
}
const secret = process.env.SECRET;
const express = require('express');
const mongoose = require('mongoose');
const User = require('../models/user');
const Post = require('../models/post');

module.exports.getposts = async (req, res) => { 
  try {
      const posts = await posts.find({});              
      res.status(200).json(posts);
  } catch (error) {
      //res.status(404).json({ message: error.message });
  }
}

// module.exports.getposts = async (req, res) => { 
//   try {
//       const postMessages = await postMessages.find();
              
//       res.status(200).json(postMessages);
//   } catch (error) {
//       res.status(404).json({ message: error.message });
//   }
// }
module.exports.getPost = async (req, res) => { 
  const { id } = req.params;
  try {
      const post = await PostMessage.findById(id);
      
      res.status(200).json(post);
  } catch (error) {
      res.status(404).json({ message: error.message });
  }
}
//post.author=req.user._id


module.exports.createPost = async (req, res) => {
  console.log(req.user);
  const user = await User.findById(req.user._id)
  console.log(user._id);
  const author=user._id;
  
  const {title, description, tags, postadmins} = req.body;
try {  
  const result = await Post.create({ author,title, description, tags, postadmins });
  res.status(201).json({ result });
  res.send()
  
} catch (error) {
    res.status(500).json({ message: "Post Not created" });    
    console.log(error);
  }
};

module.exports.updatePost = async (req, res) => {
  const { id } = req.params;
  const { title, description, posttype } = req.body;
  const newpost=await Post.findByIdAndUpdate(id,{...req.body},{new:true});
  res.status(200).json(newpost);
}

module.exports.deletePost = async (req, res) => {
  const { id } = req.params;  
  await Post.findByIdAndDelete(id);
  res.status(200).json({ message:"post deleted" });
}

module.exports.likePost = async (req, res) => {
  //const { id } = req.params;  
  //will it be userId or objectId just see to it.
  console.log('hi');  
  //const user = await User.findById(req.user._id)
  console.log(req.user);
  res.send("noice");
  // if(!req.userId) return res.json({message:"not authorised"})

  
  // const post = await Post.findById(id);

  // const index=Post.likes.findIndex((id)=>id == String(req.UserId))
  // if(index==-1) {
  //   //like the post
  //   post.likes.push(req.userId)
  // }
  // else{
  //   //dislike the post.
  //   post.likes=post.likes.filter((id)=> id != String(req.userId))
  // }
  // //const updatedPost = await PostMessage.findByIdAndUpdate(id, { likeCount: post.likeCount + 1 }, { new: true });
  // const updatedPost = await PostMessage.findByIdAndUpdate(id, post, { new: true });
  // res.json(updatedPost);
}