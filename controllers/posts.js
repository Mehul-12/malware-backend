if (process.env.NODE_ENV !== "production") {
  require('dotenv').config();
}
const secret = process.env.SECRET;
const path = require('path');
const fs = require('fs');
const upload = require('express-fileupload');
const jwt = require('jsonwebtoken');
const User = require('../models/user');
const Post = require('../models/post');
const Comment=require('../models/comment');
const https=require("https");


module.exports.getPosts = async (req, res,next) => {
  try {
    if(!req.headers.authorization){
      const posts = await Post.find({}).sort({"upcount":-1}).populate({
          path:'comments'
      });            
      res.status(200).json(posts);
    }
    else{
      const token = req.headers.authorization.split(" ")[0];
      const isCustomAuth = token.length < 500;
      console.log(token);
      let decodedData;
      if (token && isCustomAuth) {     
        decodedData = jwt.verify(token, secret);
        // console.log(decodedData)
        const founduser= await User.findById(decodedData.id).select('-password');
        if(!founduser) {throw new Error('User not found')};
        req.user=founduser;
      } 
      else if(token){
        // console.log("this");
        decodedData = jwt.decode(token);
        // console.log(decodedData);
        const email = decodedData.email;
        const foundUser = await User.findOne({ email });
        if(!foundUser) {throw new Error('User not found')};
        req.user = foundUser;
      }
      if(req.user){
        console.log(req.user);
            const posts = await Post.find({}).sort({"upcount":-1}).populate({
              path:'comments'
            });            
            const ifollow=[];
            const inotfollow=[];
            for(let i=0;i<posts.length;i++){   
              if(req.user.following.includes(posts[i].authorid)) ifollow.push(posts[i]);
              else inotfollow.push(posts[i]);
            }
            const finalarr=ifollow.concat(inotfollow);   
            res.json(finalarr);
          }
    }
    
  } catch (error) {
    res.status(401).json('Unauthorizes: No token provided');
    console.log(error);
  }
}


// module.exports.createPost = async (req, res) => {
//   const user = await User.findById(req.user._id)
//   //console.log(user._id);

//   const authorid=user._id
//   const authorname=user.name;
  
//   const {title, description, tags, postadmin,filelink} = req.body;
// try {  
//   const result = await Post.create({ authorid,authorname,title, description, tags, postadmin, filelink});
//   res.status(201).json({ result });
//   res.send()
  
// } catch (error) {
//     res.status(500).json({ message: "Post Not created" });    
//     console.log(error);
//   }
// };
module.exports.createPost = async (req, res) => {
  const user = await User.findById(req.user._id)
  console.log(user._id);

  const authorid=user._id
  const authorname=user.name;
  console.log(user)
  const {title, description, tags, postadmin,filelink} = req.body;
  let csvparsed;
try {  
    if(filelink){
      let url=filelink;
      let filename=path.basename(url);
      console.log(filename);
      let str=filename.substring(8);
      let ss= str.substring(0, str.indexOf("?"));
      var ext =path.extname(ss);
      ss=ss.substring(0,ss.indexOf("."));
      let s = str.substring(str.indexOf("?")+17);
      filename=ss+"-"+s+ext;
      const allowedExtension = ['.csv'];
      if(allowedExtension.includes(ext)){
        https.get(url,async function(reso){
          const fileStream  = fs.createWriteStream(`./uploads/${filename}`);
          reso.pipe(fileStream);
          fileStream.on("error",function(err){
              // console.log(err);
              res.status(500).json("cant upload the file");
              // res.send("hi");

          })
          fileStream.on("finish",async function(){
              fileStream.close();
              // return ans=filename;
              fs.readFile('./uploads/'+filename, 'utf8', async (err, data) => {
                if (err) {
                  console.error(err);
                  res.status(500).json("cant Read the file");
                  return;
                }
                else{
                  csvparsed=data;
                  const result = await Post.create({ authorid,authorname,title, description, tags, postadmin, filelink,csvparsed});
                  res.status(201).json({ result }); 
                }
                
              });
              fs.unlink(`./uploads/${filename}`, function (err) {
                if (err) throw err;
                console.log('File deleted!');
              });
              
          });
        });
      }
      else{
        const result = await Post.create({ authorid,authorname,title, description, tags, postadmin, filelink,csvparsed});
        res.status(201).json({ result });
      }
      
    }
    else{
        const result = await Post.create({ authorid,authorname,title, description, tags, postadmin, filelink,csvparsed});
        res.status(201).json({ result });
    }      
}catch (error) {
    res.status(500).json({ message: "Post Not created" });    
    console.log(error);
  }
};

module.exports.updatePost = async (req, res) => {
  try{
    const { id } = req.params;
    const { title, description, tags, postadmins, filelink} = req.body;
    const newpost=await Post.findByIdAndUpdate(id,{...req.body},{new:true});
    res.status(200).json(newpost);
  }
  catch (error) {
    res.status(500).json({ message: "Post Not updated" });    
    console.log(error);
  }
}

module.exports.deletePost = async (req, res) => {
  try{
    const { id } = req.params;  
    await Post.findByIdAndDelete(id);
    res.status(200).json({ message:"post deleted" });
  }
  catch (error) {
    res.status(500).json({ message: "Post Not created" });    
    console.log(error);
  }
}

module.exports.upVote = async (req, res) => {
  const { id } = req.params;
  // console.log(req.user._id);
  const userid=req.user._id;

  if(!userid) return res.json({message:"not authorised"})  
  const post = await Post.findById(id);
  //console.log(post);
  try{
    const index=post.upvotes.findIndex((id)=>id == String(userid));    
    //console.log(index);
    
    if(index==-1) {
      post.upvotes.push(userid);
      post.downvotes=post.downvotes.filter((id)=> id != String(userid))
    }
    else{
      post.upvotes=post.upvotes.filter((id)=> id != String(userid))
    }
    post.upcount=post.upvotes.length;
    post.downcount=post.downvotes.length;
    const updatedPost = await Post.findByIdAndUpdate(id, post, { new: true });
    res.status(200).json(updatedPost);
  }
  catch (error) {
    res.status(500).json({ message: "Post couldnt be liked" });    
    console.log(error);
  }
}

module.exports.downVote = async (req, res) => {
  const { id } = req.params;
  // console.log(req.user._id);
  const userid=req.user._id;

  if(!userid) return res.json({message:"not authorised"})  
  const post = await Post.findById(id);
  //console.log(post);
  try{
    const index=post.downvotes.findIndex((id)=>id == String(userid));    
    //console.log(index);
    
    if(index==-1) {
      post.downvotes.push(userid);
      post.upvotes=post.upvotes.filter((id)=> id != String(userid))
    }
    else{
      post.downvotes=post.downvotes.filter((id)=> id != String(userid))
    }    
    const upcount=post.upvotes.length;
    post.downcount=post.downvotes.length;
    const updatedPost = await Post.findByIdAndUpdate(id, post, { new: true });
    res.status(200).json(updatedPost);
  }
  catch (error) {
    res.status(500).json({ message: "Post couldnt be disliked" });    
    console.log(error);
  }
}
module.exports.unacceptPost = async (req, res) => {  
  const user = await User.findById(req.user._id)
  const authorid=user._id
  const authorname=user.name;
  
  const {description, filelink} = req.body;  
try {  
  const { id } = req.params;
  const postid=id;
  const post = await Post.findById(id);
  const obj={};
  obj['nestedauthor']=authorname;
  obj['nesteddescription']=description;
  obj['nestedfilelink']=filelink;

  post.unacceptedver.push(obj);
  // const result = await Post.create({authorid,description,filelink});
  // post.unacceptedver.push(result);
  const updatedPost = await Post.findByIdAndUpdate(id, {...post}, { new: true });
 
  res.status(200).json(updatedPost);
  
} catch (error) {
    res.status(500).json({ message: "Version error" });    
    console.log(error);
  }
};

module.exports.acceptPost = async (req, res) => {  
try {  
  const { id ,nestedid} = req.params;
  const post = await Post.findById(id);
  const index=post.unacceptedver.find(x => x._id == nestedid); 
  const obj={};
  
  obj['nestedauthor']=index.nestedauthor;
  obj['nesteddescription']=index.nesteddescription;
  obj['nestedfilelink']=index.nestedfilelink;
  post.unacceptedver=  await post.unacceptedver.filter(x => x._id != nestedid);
  // console.log(post.unacceptedver.filter(x => x._id != nestedid));
  // console.log(obj);
  

  post.acceptedver.push(obj);
  // // const result = await Post.create({authorid,description,filelink});
  // // post.unacceptedver.push(result);
  await post.save();
 
  res.status(200).json(post);
  
} catch (error) {
    res.status(500).json({ message: "Version error" });    
    console.log(error);
  }
};
module.exports.declinePost = async (req, res) => {  
  try {  
    const { id ,nestedid} = req.params;
    const post = await Post.findById(id);
    const index=post.unacceptedver.find(x => x._id == nestedid); 
    post.unacceptedver=  await post.unacceptedver.filter(x => x._id != nestedid);
    ;
    await post.save();
   
    res.status(200).json(post);
    
  } catch (error) {
      res.status(500).json({ message: "Version error" });    
      console.log(error);
    }
  };