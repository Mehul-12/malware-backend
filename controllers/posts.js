if (process.env.NODE_ENV !== "production") {
  require('dotenv').config();
}
const User = require('../models/user');
const Post = require('../models/post');
const Comment=require('../models/comment');

module.exports.getPosts = async (req, res) => { 
  //console.log(req.user._id);
  try {        
      //console.log(req.user);
      //if(!(req.user)){
        const posts = await Post.find({}).populate({
          path:'comments'
          // populate:{
          //   path:'comment'
          // }
        });//.populate('author');             
        res.status(200).json(posts);
      //}
      // else{
      //   //query all posts and find if this user is present in them.
      //   const posts = await Post.find({});
      //   for(let i=0;i<posts.length;i++){
      //     const post=posts[i];
      //     const index=post.upvotes.findIndex((id)=>id == String(req.user._id));
      //     console.log(index);
      //     //console.log(post);
      //     if(index!=-1) res.json({message:"liked"});

      //     //if(post.upvotes.includes(String(req.user._id))){
      //     console.log("hi");
      //     //console.log(req.user._id);

      //     res.json({
      //     _id: post._id,
      //     title: post.title,
      //     description: post.description,
      //     authorid: post.authorid,
      //     authorname: post.authorname,
      //     tags:post.tags,
      //     postadmins:post.postadmins,

      //     comments: post.comments,
      //     upvotes: post.upvotes,
      //     downvotes:post.downvotes,
      //     bookmark:post.bookmark,
      //     acceptedver: post.acceptedver,
      //     unacceptedver: post.unacceptedver,
      //     cnt:post.cnt,
      //     downcount:post.downcount,
      //     upcount: post.upcount,
      //   })
        
        // if(index=-1) {
        //   res.json({message:"not liked"})
        // }
        // }  
      }
      
   catch (error) {
      res.status(404).json({ message: error.message });
  }
}

// module.exports.getPost = async (req, res) => { 
//   const { id } = req.params;
//   try {
//       const post = await Post.findById(id)
//       .populate({
//         path:'comments'
//         // populate:{
//         //   path:'comment'
//         // }
//       });//.populate('author');      
//       res.status(200).json(post);
//       }     
//     catch (error) {
//       res.status(404).json({ message: error.message });
//     }
// }
//post.author=req.user._id

module.exports.createPost = async (req, res) => {
  //console.log(req.user);
  const user = await User.findById(req.user._id)
  //console.log(user._id);

  const authorid=user._id
  const authorname=user.name;
  
  const {title, description, tags, postadmins} = req.body;
try {  
  const result = await Post.create({ authorid,authorname,title, description, tags, postadmins });
  res.status(201).json({ result });
  res.send()
  
} catch (error) {
    res.status(500).json({ message: "Post Not created" });    
    console.log(error);
  }
};

module.exports.updatePost = async (req, res) => {
  const { id } = req.params;
  const { title, description, tags, postadmins} = req.body;
  const newpost=await Post.findByIdAndUpdate(id,{...req.body},{new:true});
  res.status(200).json(newpost);
}

module.exports.deletePost = async (req, res) => {
  const { id } = req.params;  
  await Post.findByIdAndDelete(id);
  res.status(200).json({ message:"post deleted" });
}

module.exports.upVote = async (req, res) => {
  const { id } = req.params;
  // console.log(req.user._id);
  const userid=req.user._id;

  if(!userid) return res.json({message:"not authorised"})  
  const post = await Post.findById(id);
  //console.log(post);
  try{
    const index=post.upvotes.findIndex((id)=>id == String(userid));    
    //console.log(index);
    
    if(index==-1) {
      post.upvotes.push(userid);
      post.downvotes=post.downvotes.filter((id)=> id != String(userid))
    }
    else{
      post.upvotes=post.upvotes.filter((id)=> id != String(userid))
    }
    post.upcount=post.upvotes.length;
    post.downcount=post.downvotes.length;
    const updatedPost = await Post.findByIdAndUpdate(id, post, { new: true });
    res.status(200).json(updatedPost);
  }
  catch (error) {
    res.status(500).json({ message: "Post couldnt be liked" });    
    console.log(error);
  }
}

module.exports.downVote = async (req, res) => {
  const { id } = req.params;
  // console.log(req.user._id);
  const userid=req.user._id;

  if(!userid) return res.json({message:"not authorised"})  
  const post = await Post.findById(id);
  //console.log(post);
  try{
    const index=post.downvotes.findIndex((id)=>id == String(userid));    
    //console.log(index);
    
    if(index==-1) {
      post.downvotes.push(userid);
      post.upvotes=post.upvotes.filter((id)=> id != String(userid))
    }
    else{
      post.downvotes=post.downvotes.filter((id)=> id != String(userid))
    }    
    post.upcount=post.upvotes.length;
    post.downcount=post.downvotes.length;
    const updatedPost = await Post.findByIdAndUpdate(id, post, { new: true });
    res.status(200).json(updatedPost);
  }
  catch (error) {
    res.status(500).json({ message: "Post couldnt be disliked" });    
    console.log(error);
  }
}