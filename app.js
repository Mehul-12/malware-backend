if (process.env.NODE_ENV !== "production") {
    require('dotenv').config();
}

const express = require('express');
const path = require('path');
const mongoose = require('mongoose');
const session = require('express-session');
const bodyParser = require('body-parser');
const dbUrl = process.env.DB_URL;

const User = require('./models/user');
const Comment=require('./models/comment');
const Post=require('./models/post');

const userRoutes = require('./routes/users');
const postRoutes=require('./routes/posts');
const commentRoutes=require('./routes/comments');
const {spawn} = require('child_process');
const cors = require('cors');
const cookieParser = require("cookie-parser");
mongoose.connect(dbUrl, {
    useNewUrlParser: true,
    useUnifiedTopology: true
});

const db = mongoose.connection;
db.on("error", console.error.bind(console, "connection error:"));
db.once("open", () => {
    console.log("Database connected");
});

const app = express();
app.use(cookieParser());
app.use(bodyParser.urlencoded({ extended: false }))

// parse application/json
app.use(bodyParser.json())
// const corsOptions ={
//     origin:'*', 
//     credentials:true,            //access-control-allow-credentials:true
//     optionSuccessStatus:200,
//  }
 
//app.use(cors(corsOptions))
app.use(cors());
// const sessionConfig = {
//     secret: 'thisshouldbeabettersecret!',
//     resave: false,
//     saveUninitialized: true,
//     cookie: {
//         httpOnly: true,
//         expires: Date.now() + 1000 * 60 * 60 * 24 * 7,
//         maxAge: 1000 * 60 * 60 * 24 * 7
//     }
// }

// app.use(session(sessionConfig))

app.use((req, res, next) => {
    // console.log(req.session)
    res.locals.currentUser = req.user;
    next();
})

app.use('/', userRoutes);
app.use('/', postRoutes);
//app.use('/:id/createComment', commentRoutes);
app.use('/', commentRoutes);

app.get('/xyz', (req, res) => {
 
    try{var dataToSend;
        // spawn new child process to call the python script
        const python = spawn('python', ['Script.py','EpicGamesLauncher.exe']);
        // collect data from script
        python.stdout.on('data', function (data) {
         console.log('Pipe data from python script ...');
         dataToSend = data.toString();
        });
        // in close event we are sure that stream from child process is closed
        python.on('close', (code) => {
        console.log(`child process close all stdio with code ${code}`);
        // send data to browser
        res.send(dataToSend)
        });
    }
    catch{
        res.send("error occured");
    }
    
   });
app.all('*', (req, res, next) => {
    next(new ExpressError('Page Not Found', 404))
})

app.use((err, req, res, next) => {
    const { statusCode = 500 } = err;
    if (!err.message) err.message = 'Oh No, Something Went Wrong!'
    res.status(statusCode).json({message: err });
})
const port= process.env.PORT || 3000
app.listen(port, () => {
    console.log(`serving on the port ${port}`);
})