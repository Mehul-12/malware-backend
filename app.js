if (process.env.NODE_ENV !== "production") {
    require('dotenv').config();
}

const express = require('express');
const path = require('path');
const fs = require('fs');
const mongoose = require('mongoose');
const session = require('express-session');
const bodyParser = require('body-parser');
const dbUrl = process.env.DB_URL;

const User = require('./models/user');
const Comment=require('./models/comment');
const Post=require('./models/post');

const userRoutes = require('./routes/users');
const postRoutes=require('./routes/posts');
const commentRoutes=require('./routes/comments');
const {spawn} = require('child_process');
const upload = require('express-fileupload');
const cors = require('cors');
const cookieParser = require("cookie-parser");
mongoose.connect(dbUrl, {
    useNewUrlParser: true,
    useUnifiedTopology: true
});

const db = mongoose.connection;
db.on("error", console.error.bind(console, "connection error:"));
db.once("open", () => {
    console.log("Database connected");
});

const app = express();
app.use(cookieParser());
app.use(bodyParser.urlencoded({ extended: false }))

// parse application/json
app.use(bodyParser.json())
app.use(cors());

app.use((req, res, next) => {
    // console.log(req.session)
    res.locals.currentUser = req.user;
    next();
})
app.use(upload());
app.use('/', userRoutes);
app.use('/', postRoutes);
app.use('/', commentRoutes);
app.post('/checkfile',(req,res,next)=>{
    
    try {
        if(req.files){
            console.log(req.files);
            var file =req.files.file;
            var filename  = file.name;
            console.log(filename);
            const allowedExtension = ['.exe'];
            var ext =path.extname(filename);
            console.log(ext);
            if(!allowedExtension.includes(ext)){
                // console.log("ff");
                res.status(422).send("Invalid file extension");
            }
            else{
                file.mv('./uploads/'+filename,function(err){
                    // console.log("f");
                    if(err){
                        res.status(500).json("cant upload the file");
                        // next();
                    }else{
                        var dataToSend;
                        const python = spawn('python', ['script.py',`./uploads/${filename}`]);
                        python.stdout.on('data', function (data) {
                        console.log('Pipe data from python script ...');
                        dataToSend = data.toString();
                        });
                        python.on('close', (code) => {
                        console.log(`child process close all stdio with code ${code}`);
                        fs.unlink(`./uploads/${filename}`, function (err) {
                            if (err) throw err;
                            console.log('File deleted!');
                        });
                        dataToSend= dataToSend.slice(0,-2);
                        console.log(dataToSend);
                        res.status(200).json({result: dataToSend});
                        });
                    }
                });
            }
        
        }
    }
    catch{
        res.status(400).json({ message: "Invalid Input Provided" }); 
    }
});
app.get('/xyz', (req, res) => {
 
    try{var dataToSend;
        // spawn new child process to call the python script
        const python = spawn('python', ['script1.py']);
        // collect data from script
        python.stdout.on('data', function (data) {
         console.log('Pipe data from python script ...');
         dataToSend = data.toString();
        });
        // in close event we are sure that stream from child process is closed
        python.on('close', (code) => {
        console.log(`child process close all stdio with code ${code}`);
        // send data to browser
        res.send(dataToSend)
        });
    }
   catch (error) {
    res.status(500).json({ message: "Not a file posted" }); 
  }
    
});
  
app.get('/abc', (req, res) => {
 
    try{var dataToSend;
        // spawn new child process to call the python script
        const python = spawn('python', ['script.py','Skype-8.83.0.408.exe']);
        // collect data from script
        python.stdout.on('data', function (data) {
         console.log('Pipe data from python script ...');
         dataToSend = data.toString();
        });
        // in close event we are sure that stream from child process is closed
        python.on('close', (code) => {
        console.log(`child process close all stdio with code ${code}`);
        // send data to browser
        res.send(dataToSend)
        });
    }
    catch{
        res.send("error occured");
    }
    
});
   
app.all('*', (req, res, next) => {
    next(new ExpressError('Page Not Found', 404))
})

app.use((err, req, res, next) => {
    const { statusCode = 500 } = err;
    if (!err.message) err.message = 'Oh No, Something Went Wrong!'
    res.status(statusCode).json({message: err });
})
const port= process.env.PORT || 3000
app.listen(port, () => {
    console.log(`serving on the port ${port}`);
})